name: Check Project Assignment on Label Change

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]

jobs:
  check-project-assignment:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up jq
        run: sudo apt-get install jq

      - name: Get Project Details and Create Column if Needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID="YOUR_PROJECT_ID"  # Update with your new project ID
          REPO=${{ github.repository }}
          ISSUE_NUMBER=$([[ "${{ github.event_name }}" == "issues" ]] && echo "${{ github.event.issue.number }}" || echo "${{ github.event.pull_request.number }}")
          ISSUE_TYPE=$([[ "${{ github.event_name }}" == "issues" ]] && echo "issues" || echo "pulls")

          echo "Fetching project details for project $PROJECT_ID..."
          PROJECT_QUERY='
          {
            node(id: "'"$PROJECT_ID"'") {
              ... on ProjectNext {
                id
                title
                fields(first: 20) {
                  nodes {
                    id
                    name
                    settings
                  }
                }
              }
            }
          }
          '
          PROJECT_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{\"query\":\"$PROJECT_QUERY\"}" https://api.github.com/graphql)
          echo "Project Response: $PROJECT_RESPONSE"

          echo "Fetching columns for project $PROJECT_ID..."
          COLUMNS_QUERY='
          {
            node(id: "'"$PROJECT_ID"'") {
              ... on ProjectNext {
                id
                views(first: 20) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          }
          '
          COLUMNS_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{\"query\":\"$COLUMNS_QUERY\"}" https://api.github.com/graphql)
          echo "Columns Response: $COLUMNS_RESPONSE"

          BOT_COLUMN_ID=$(echo "$COLUMNS_RESPONSE" | jq -r '.data.node.views.nodes[] | select(.name == "BotCreate") | .id')

          if [ -z "$BOT_COLUMN_ID" ]; then
            echo "Creating column 'BotCreate' is not possible via API for the new Projects (beta). Please create it manually."
            exit 1
          fi

          echo "Column 'BotCreate' ID: $BOT_COLUMN_ID"

          # Adding item to the BotCreate column
          ADD_ITEM_MUTATION='
          mutation {
            addProjectNextItem(input: {projectId: "'"$PROJECT_ID"'", contentId: "'"$ISSUE_NUMBER"'"}) {
              projectNextItem {
                id
              }
            }
          }
          '
          ADD_ITEM_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{\"query\":\"$ADD_ITEM_MUTATION\"}" https://api.github.com/graphql)
          echo "Add Item Response: $ADD_ITEM_RESPONSE"

          # Move item to the BotCreate column
          MOVE_ITEM_MUTATION='
          mutation {
            updateProjectNextItemField(input: {projectId: "'"$PROJECT_ID"'", itemId: "'"$(echo $ADD_ITEM_RESPONSE | jq -r .data.addProjectNextItem.projectNextItem.id)"'", fieldId: "'"$BOT_COLUMN_ID"'", value: "BotCreate"}) {
              projectNextItem {
                id
              }
            }
          }
          '
          MOVE_ITEM_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{\"query\":\"$MOVE_ITEM_MUTATION\"}" https://api.github.com/graphql)
          echo "Move Item Response: $MOVE_ITEM_RESPONSE"
