name: Update Project Status Based on Label

on:
  issues:
    types: [labeled, unlabeled]
  pull_request:
    types: [labeled, unlabeled]

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine project column based on label
        id: determine-column
        run: |
          LABEL=${{ github.event.label.name }}
          if [[ "$LABEL" == "bug" ]]; then
            echo "column=Security" >> $GITHUB_ENV
          elif [[ "$LABEL" == "feature-request" ]]; then
            echo "column=Enhancement" >> $GITHUB_ENV
          else
            echo "column=Backlog" >> $GITHUB_ENV
          fi

      - name: Get issue or PR number
        id: get-issue-pr-number
        run: |
          if [[ "${{ github.event.pull_request }}" ]]; then
            echo "issue_or_pr=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "issue_or_pr=${{ github.event.issue.number }}" >> $GITHUB_ENV
          fi

      - name: Debug project details
        id: debug-project
        run: |
          PROJECT_ID=4905915  # Provided project ID
          echo "Fetching details for project ID $PROJECT_ID"
          gh api -X GET /projects/${PROJECT_ID} --jq '.title'
          echo "Fetching views for project ID $PROJECT_ID"
          gh api -X GET /projects/${PROJECT_ID}/views --jq '.[] | .name'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get project view ID
        id: get-view-id
        run: |
          PROJECT_ID=4905915  # Provided project ID
          VIEW_NAME="${{ env.column }}"
          VIEW_ID=$(gh api -X GET /projects/${PROJECT_ID}/views --jq ".[] | select(.name == \"${VIEW_NAME}\") | .id")
          if [ -z "$VIEW_ID" ]; then
            echo "No view found or view ID could not be retrieved."
            exit 1
          fi
          echo "view_id=$VIEW_ID" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get project card ID
        id: get-card-id
        run: |
          ISSUE_OR_PR_NUMBER=${{ env.issue_or_pr }}
          VIEW_ID=${{ env.view_id }}
          CARD_ID=$(gh api -X GET /projects/${PROJECT_ID}/columns/${VIEW_ID}/cards --jq ".[] | select(.content_id == $ISSUE_OR_PR_NUMBER and .content_type == \"Issue\") | .id")
          if [ -z "$CARD_ID" ]; then
            echo "No card found or card ID could not be retrieved."
            exit 1
          fi
          echo "card_id=$CARD_ID" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update project card status
        run: |
          CARD_ID=${{ env.card_id }}
          gh api -X PATCH /projects/${PROJECT_ID}/columns/cards/${CARD_ID} -f column_id="${{ env.view_id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
