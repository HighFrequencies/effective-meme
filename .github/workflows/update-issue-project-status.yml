name: Update Project Status Based on Label

on:
  issues:
    types: [labeled, unlabeled]
  pull_request:
    types: [labeled, unlabeled]

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine project column based on label
        id: determine-column
        run: |
          LABEL=${{ github.event.label.name }}
          if [[ "$LABEL" == "bug" ]]; then
            echo "column=Security" >> $GITHUB_ENV
          elif [[ "$LABEL" == "feature-request" ]]; then
            echo "column=Enhancement" >> $GITHUB_ENV
          else
            echo "column=Backlog" >> $GITHUB_ENV
          fi

      - name: Get issue or PR number
        id: get-issue-pr-number
        run: |
          if [[ "${{ github.event.pull_request }}" ]]; then
            echo "issue_or_pr=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "issue_or_pr=${{ github.event.issue.number }}" >> $GITHUB_ENV
          fi

      - name: Find associated project
        id: find-project
        run: |
          ISSUE_OR_PR_NUMBER=${{ env.issue_or_pr }}
          PROJECTS=$(gh api -X GET /issues/${ISSUE_OR_PR_NUMBER}/projects --jq '.[] | .id')
          if [ -z "$PROJECTS" ]; then
            echo "No associated project found."
            exit 1
          fi
          echo "project_ids=$PROJECTS" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find project view ID
        id: get-view-id
        run: |
          PROJECT_IDS=(${{ env.project_ids }})
          VIEW_NAME="${{ env.column }}"
          for PROJECT_ID in "${PROJECT_IDS[@]}"; do
            VIEW_ID=$(gh api -X GET /projects/${PROJECT_ID}/views --jq ".[] | select(.name == \"${VIEW_NAME}\") | .id")
            if [ -n "$VIEW_ID" ]; then
              echo "view_id=$VIEW_ID" >> $GITHUB_ENV
              echo "project_id=$PROJECT_ID" >> $GITHUB_ENV
              break
            fi
          done
          if [ -z "$VIEW_ID" ]; then
            echo "No view found for project."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Move issue or PR to project column
        run: |
          ISSUE_OR_PR_NUMBER=${{ env.issue_or_pr }}
          VIEW_ID=${{ env.view_id }}
          gh api -X POST /projects/${PROJECT_ID}/columns/${VIEW_ID}/cards \
            -f content_id=$ISSUE_OR_PR_NUMBER \
            -f content_type=Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
