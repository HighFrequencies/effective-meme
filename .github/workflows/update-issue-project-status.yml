name: Fetch Associated Project

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]

jobs:
  fetch-associated-project:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up jq
        run: sudo apt-get install jq

      - name: Fetch Associated Project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO=${{ github.repository }}
          ISSUE_NUMBER=$([[ "${{ github.event_name }}" == "issues" ]] && echo "${{ github.event.issue.number }}" || echo "${{ github.event.pull_request.number }}")
          ISSUE_TYPE=$([[ "${{ github.event_name }}" == "issues" ]] && echo "issues" || echo "pulls")

          echo "Fetching issue or pull request details..."
          ISSUE_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" https://api.github.com/repos/$REPO/$ISSUE_TYPE/$ISSUE_NUMBER)
          echo "Issue Response: $ISSUE_RESPONSE"

          PROJECT_IDS=$(echo "$ISSUE_RESPONSE" | jq -r '.project_cards[].project_url | split("/")[-1]')
          if [ -z "$PROJECT_IDS" ]; then
            echo "No project associated with this issue or pull request."
            exit 0
          fi

          for PROJECT_ID in $PROJECT_IDS; do
            echo "Fetching project details for project $PROJECT_ID..."
            PROJECT_QUERY=$(jq -n --arg project_id "$PROJECT_ID" '{"query": "query { node(id: \($project_id)) { ... on ProjectNext { id title } } }"}')
            PROJECT_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$PROJECT_QUERY" https://api.github.com/graphql)
            PROJECT_NAME=$(echo "$PROJECT_RESPONSE" | jq -r '.data.node.title')
            echo "Project Name: $PROJECT_NAME"
          done
