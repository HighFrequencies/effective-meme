name: Check Project Assignment on Label Change

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]

jobs:
  check-project-assignment:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up jq
        run: sudo apt-get install jq

      - name: Get Project Details and Create Column if Needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID="4905915"
          REPO=${{ github.repository }}
          ISSUE_NUMBER=$([[ "${{ github.event_name }}" == "issues" ]] && echo "${{ github.event.issue.number }}" || echo "${{ github.event.pull_request.number }}")
          ISSUE_TYPE=$([[ "${{ github.event_name }}" == "issues" ]] && echo "issues" || echo "pulls")

          echo "Fetching project details for project $PROJECT_ID..."
          PROJECT_QUERY=$(jq -n --arg project_id "$PROJECT_ID" '{"query": "query { node(id: \($project_id)) { ... on ProjectNext { id title fields(first: 20) { nodes { id name settings } } } } }"}')
          PROJECT_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$PROJECT_QUERY" https://api.github.com/graphql)
          echo "Project Response: $PROJECT_RESPONSE"

          echo "Fetching columns for project $PROJECT_ID..."
          COLUMNS_QUERY=$(jq -n --arg project_id "$PROJECT_ID" '{"query": "query { node(id: \($project_id)) { ... on ProjectNext { id views(first: 20) { nodes { id name } } } } }"}')
          COLUMNS_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$COLUMNS_QUERY" https://api.github.com/graphql)
          echo "Columns Response: $COLUMNS_RESPONSE"

          BOT_COLUMN_ID=$(echo "$COLUMNS_RESPONSE" | jq -r '.data.node.views.nodes[] | select(.name == "BotCreate") | .id')

          if [ -z "$BOT_COLUMN_ID" ]; then
            echo "Creating column 'BotCreate' is not possible via API for the new Projects (beta). Please create it manually."
            exit 1
          fi

          echo "Column 'BotCreate' ID: $BOT_COLUMN_ID"

          # Adding item to the BotCreate column
          ADD_ITEM_MUTATION=$(jq -n --arg project_id "$PROJECT_ID" --arg content_id "$ISSUE_NUMBER" '{"query": "mutation { addProjectNextItem(input: {projectId: \($project_id), contentId: \($content_id)}) { projectNextItem { id } } }"}')
          ADD_ITEM_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$ADD_ITEM_MUTATION" https://api.github.com/graphql)
          echo "Add Item Response: $ADD_ITEM_RESPONSE"

          # Move item to the BotCreate column
          ITEM_ID=$(echo $ADD_ITEM_RESPONSE | jq -r .data.addProjectNextItem.projectNextItem.id)
          MOVE_ITEM_MUTATION=$(jq -n --arg project_id "$PROJECT_ID" --arg item_id "$ITEM_ID" --arg field_id "$BOT_COLUMN_ID" '{"query": "mutation { updateProjectNextItemField(input: {projectId: \($project_id), itemId: \($item_id), fieldId: \($field_id), value: \"BotCreate\"}) { projectNextItem { id } } }"}')
          MOVE_ITEM_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$MOVE_ITEM_MUTATION" https://api.github.com/graphql)
          echo "Move Item Response: $MOVE_ITEM_RESPONSE"
