# This workflow will triage pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: Update Project Status Based on Label

on:
  issues:
    types: [labeled, unlabeled]
  pull_request:
    types: [labeled, unlabeled]

jobs:
  update-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        uses: cli/cli-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine project column based on label
        id: determine-column
        run: |
          LABEL=${{ github.event.label.name }}
          if [[ "$LABEL" == "bug" ]]; then
            echo "column=Security" >> $GITHUB_ENV
          elif [[ "$LABEL" == "feature-request" ]]; then
            echo "column=Enhancement" >> $GITHUB_ENV
          else
            echo "column=Backlog" >> $GITHUB_ENV
          fi

      - name: Get issue or PR number
        id: get-issue-pr-number
        run: |
          if [[ "${{ github.event.pull_request }}" ]]; then
            echo "issue_or_pr=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "issue_or_pr=${{ github.event.issue.number }}" >> $GITHUB_ENV
          fi

      - name: Get project column ID
        id: get-column-id
        run: |
          PROJECT_ID=$(gh repo view ${{ github.repository }} --json projects --jq '.projects[0].id')
          COLUMN_ID=$(gh api -X GET /projects/${PROJECT_ID}/columns --jq ".[] | select(.name == \"${{ env.column }}\") | .id")
          echo "column_id=$COLUMN_ID" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update project column
        run: |
          gh api -X PATCH /repos/${{ github.repository }}/issues/${{ env.issue_or_pr }}/projects \
            -f project_column_id="${{ env.column_id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

